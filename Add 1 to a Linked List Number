You are given a linked list where each element in the list is a node and have an integer data. You need to add 1 to the number formed by concatinating all the list node numbers together and return the head of the modified linked list. 

Note: The head represents the first element of the given array.

Examples :

Input: LinkedList: 4->5->6
Output: 457

Explanation: 4->5->6 represents 456 and when 1 is added it becomes 457. 
Input: LinkedList: 1->2->3
Output: 124
 
Explanation:  1->2->3 represents 123 and when 1 is added it becomes 124. 
Expected Time Complexity: O(n)
Expected Auxiliary Space: O(1)

Constraints:
1 <= len(list) <= 105
0 <= list[i] <= 9


Answer


class Solution {
    private Node reverse(Node head){
        Node curr = head;
        Node prev = null;
        Node currP1 = null;
        while(curr != null){
            currP1 = curr.next;
            curr.next = prev;
            prev = curr;
            curr = currP1;
        }
        return prev;
    }
    public Node addOne(Node head) {
        // code here.
        Node temp = head;
        Node reversed = reverse(temp);
        int carry = 1;
        int sum = 0;
        temp = reversed;
         
         while(temp != null){
             
             sum = carry + temp.data;
             
             if(sum > 9){
                 sum = 0;
                 carry = 1;
             }
             else carry = 0;
             
             temp.data = sum;
            temp = temp.next;
             
             
             
         }
         
       
         Node check = reversed;
         while(check.next != null){
             check = check.next;
         }
         if(check.data == 0){
             Node lastNode = new Node(1);
             check.next = lastNode;
         }
         return reverse(reversed);
    }
}
