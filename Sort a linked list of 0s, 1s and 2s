https://www.geeksforgeeks.org/problems/given-a-linked-list-of-0s-1s-and-2s-sort-it/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=given-a-linked-list-of-0s-1s-and-2s-sort-it

Given a linked list where nodes can contain values 0s, 1s, and 2s only. The task is to segregate 0s, 1s, and 2s linked list such that all zeros segregate to the head side, 2s at the end of the linked list, and 1s in the middle of 0s and 2s.

Examples:

Input: LinkedList: 1->2->2->1->2->0->2->2
Output: 0->1->1->2->2->2->2->2
Explanation: All the 0s are segregated to the left end of the linked list, 2s to the right end of the list, and 1s in between.
 
Input: LinkedList: 2->2->0->1
Output: 0->1->2->2
Explanation: After arranging all the 0s,1s and 2s in the given format, the output will be 0 1 2 2.

Expected Time Complexity: O(n).
Expected Auxiliary Space: O(n).

Constraints:
1 <= no. of nodes <= 106
0 <= node->data <= 2



Answer:
class Solution {
    // Function to sort a linked list of 0s, 1s and 2s.
    static Node segregate(Node head) {
        // add your code here
        
        if(head == null || head.next == null)return head;
        Node temp = head;

//learnt this new method of initializing dummy Nodes
       Node zeroHead = new Node(-1);
       Node zeroTemp = zeroHead;
       Node oneHead = new Node(-1);
       Node oneTemp = oneHead;
       Node twoHead = new Node(-1);
       Node twoTemp = twoHead;
       
      
      //this logic was easy 
       while(temp != null){
           if(temp.data == 0){
               zeroTemp.next = temp;
               zeroTemp = zeroTemp.next;
           }
           if(temp.data == 1){
               oneTemp.next = temp;
               oneTemp = oneTemp.next;
           }
           if (temp.data == 2){
               twoTemp.next = temp;
               twoTemp = twoTemp.next;
           }
           temp = temp.next;
       }


//it is very imp to terminate the seperate lists so that they do not converge at the end
       zeroTemp.next = null;
       twoTemp.next = null;
       oneTemp.next = null;
       


//condition checking so the we do not take next of any null value
      if(oneHead.next != null){
          zeroTemp.next = oneHead.next;
      }
      else{
          zeroTemp.next = twoHead.next;
      }
      oneTemp.next = twoHead.next;
      
      
    
      
        return zeroHead.next;
        
    }
}
