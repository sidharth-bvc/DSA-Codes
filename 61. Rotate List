Given the head of a linked list, rotate the list to the right by k places.

 

Example 1:


Input: head = [1,2,3,4,5], k = 2
Output: [4,5,1,2,3]
Example 2:


Input: head = [0,1,2], k = 4
Output: [2,0,1]
 

Constraints:

The number of nodes in the list is in the range [0, 500].
-100 <= Node.val <= 100
0 <= k <= 2 * 109


class Solution {
    public ListNode rotateRight(ListNode head, int k) {

        if((head == null) || head.next == null)return head;

        ListNode temp = head;
        int size = 0;
        while(temp != null){
            size ++;
            temp = temp.next;
        }
        temp = head;

        k = k%size;

        ListNode newHead = null;
        while(k != 0){
            while(temp != null && temp.next != null && temp.next.next != null){
                temp = temp.next;
            }
            newHead = temp.next;
            if(newHead != null)newHead.next = head;
            head = newHead;
            temp.next = null;
            k--;
            temp = head;
        }

        return head;
    }
}
