You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.
Example 2:

Input: l1 = [0], l2 = [0]
Output: [0]
Example 3:

Input: l1 = [9,9,9,9,9,9,9], l2 = [9,9,9,9]
Output: [8,9,9,9,0,0,0,1]
 

Constraints:

The number of nodes in each linked list is in the range [1, 100].
0 <= Node.val <= 9
It is guaranteed that the list represents a number that does not have leading zeros.



Asnwer:

class Solution {
    private ListNode reverse(ListNode head){
        ListNode curr = head;
        ListNode prev = null;
        ListNode currp1 = null;
        while(curr != null){
            currp1 = curr.next;
            curr.next = prev;
            prev = curr;
            curr = currp1;
        }
        return prev;
    }
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        // ListNode r1 = reverse(l1);
        // ListNode r2 = reverse(l2);

        ListNode r1 = l1;
        ListNode r2 = l2;

        int sum = 0;
        int carry = 0;

        ListNode s1 = r1;
        int size1 = 0;
        while(s1 != null){
            size1 ++;
            s1 = s1.next;
        }

        ListNode s2 = r2;
        int size2 = 0;
        while(s2 != null){
            size2 ++;
            s2 = s2.next;
        }


         if(size1 == 1 && size2 == 1 && r1.val + r2.val > 9){
            r1.val = (r1.val + r2.val) % 10;
            ListNode lastNode = new ListNode(1);
            r1.next = lastNode;
            return r1;
        }

        ListNode temp = null;
        ListNode other = null;
        

        if(size1 >= size2){
            temp = r1;
            other = r2;
        }
        else{
            temp = r2;
            other = r1;
        }
        
        ListNode current = temp;
       
        while(current != null){
            sum = 0;
            if(other != null){
                sum = carry + current.val + other.val;
            }
            else sum = current.val + carry;

            if(sum > 9){
                sum = sum % 10;
                carry = 1;
            }
            else if(sum < 10)carry = 0;

            current.val = sum;

            current = current.next;
            if(other != null)other = other.next;

        }

         ListNode check = temp;
         while(check.next != null){
             check = check.next;
         }
         if( carry == 1){ // check.val == 0 &&
             ListNode lastNode = new ListNode(1);
             check.next = lastNode;
         }

       

        return temp;
    }
}
