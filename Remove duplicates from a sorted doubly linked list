Given a doubly linked list of n nodes sorted by values, the task is to remove duplicate nodes present in the linked list.

Example 1:

Input:
n = 6
1<->1<->1<->2<->3<->4
Output:
1<->2<->3<->4
Explanation:
Only the first occurance of node with value 1 is 
retained, rest nodes with value = 1 are deleted.
Example 2:

Input:
n = 7
1<->2<->2<->3<->3<->4<->4
Output:
1<->2<->3<->4
Explanation:
Only the first occurance of nodes with values 2,3 and 4 are 
retained, rest repeating nodes are deleted.
Your Task:
You have to complete the method removeDuplicates() which takes 1 argument: the head of the linked list.  Your function should return a pointer to a linked list with no duplicate element.

Constraint:
1 <= n <= 105
Expected Time Complexity: O(n)
Expected Space Complexity: O(1)


// i was making the mistake of "temp.next.next.prev = temp.next.prev" but once temp.next = temp.next.next then temp.next.next becomes temp.next and the condion should be "temp.next.prev = temp" only. Be focussed man 

class Solution{
    Node removeDuplicates(Node head){
    
        if(head == null || head.next == null)return head;
      Node temp = head;
        while(temp != null && temp.next != null ){
            if(temp.data == temp.next.data){
                temp.next = temp.next.next;
                if(temp.next != null)
                temp.next.prev = temp;
                continue;
               
            }
            temp = temp.next;
            
        }
        return head;
    }
}
