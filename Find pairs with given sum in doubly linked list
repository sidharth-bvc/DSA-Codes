
Difficulty: EasyAccuracy: 66.01%Submissions: 56K+Points: 2
Given a sorted doubly linked list of positive distinct elements, the task is to find pairs in a doubly-linked list whose sum is equal to given value target.

 

Example 1:

Input:  
1 <-> 2 <-> 4 <-> 5 <-> 6 <-> 8 <-> 9
target = 7
Output: (1, 6), (2,5)
Explanation: We can see that there are two pairs 
(1, 6) and (2,5) with sum 7.
 

Example 2:

Input: 
1 <-> 5 <-> 6
target = 6
Output: (1,5)
Explanation: We can see that there is one pairs  (1, 5) with sum 6.

 

Your Task:
You don't need to read input or print anything. Your task is to complete the function findPairsWithGivenSum() which takes head node of the doubly linked list and an integer target as input parameter and returns an array of pairs. If there is no such pair return empty array.

Expected Time Complexity: O(N)
Expected Auxiliary Space: O(1)
Constraints:
1 <= N <= 105
1 <= target <= 105

//the mistake i was making was to not handle the main while loop condition properly, i was not mkaing start = start.next when the sum == target, that way when we had found one pair, the while loop was not terminating

class Solution {
    public static ArrayList<ArrayList<Integer>> findPairsWithGivenSum(int target, Node head) {
        // code here
        ArrayList<ArrayList<Integer>> biggerAl = new ArrayList<>();
        
        Node start = head;
        
        Node temp = head;
        while(temp.next != null)temp = temp.next;
        Node end = temp;
        
        // temp = head;
    
        while(start != end ){
            int sum = start.data + end.data;
            if(sum == target){
                ArrayList<Integer> al = new ArrayList<>();
                al.add(start.data);
                al.add(end.data);
                biggerAl.add(al);
                start = start.next;
                continue;
            }
            else if(sum > target){
                end = end.prev;
            }
            else if(sum < target){
                start = start.next;
            }
        }
        return biggerAl;
    }
}
